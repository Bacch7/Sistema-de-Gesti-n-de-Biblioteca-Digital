class Libro:
    def __init__(self, titulo, autor, categoria, isbn):
        self.titulo = titulo
        self.autor = autor
        self.categoria = categoria
        self.isbn = isbn

    def __repr__(self):
        return f"Libro(titulo={self.titulo}, autor={self.autor}, categoria={self.categoria}, isbn={self.isbn})"


class Usuario:
    def __init__(self, nombre, id_usuario):
        self.nombre = nombre
        self.id_usuario = id_usuario
        self.libros_prestados = []

    def __repr__(self):
        return f"Usuario(nombre={self.nombre}, id_usuario={self.id_usuario})"

    def prestar_libro(self, libro):
        self.libros_prestados.append(libro)

    def devolver_libro(self, libro):
        self.libros_prestados.remove(libro)


class Biblioteca:
    def __init__(self):
        self.libros = {}  # Clave: ISBN, Valor: Libro
        self.usuarios = set()  # Conjunto de IDs de usuarios únicos

    def añadir_libro(self, libro):
        if libro.isbn in self.libros:
            raise ValueError("El libro ya está en la biblioteca.")
        self.libros[libro.isbn] = libro

    def quitar_libro(self, isbn):
        if isbn not in self.libros:
            raise ValueError("El libro no está en la biblioteca.")
        del self.libros[isbn]

    def registrar_usuario(self, nombre, id_usuario):
        if id_usuario in [u.id_usuario for u in self.usuarios]:
            raise ValueError("El ID de usuario ya está registrado.")
        self.usuarios.add(Usuario(nombre, id_usuario))

    def dar_baja_usuario(self, id_usuario):
        usuario_a_eliminar = next((u for u in self.usuarios if u.id_usuario == id_usuario), None)
        if usuario_a_eliminar is None:
            raise ValueError("El usuario no está registrado.")
        self.usuarios.remove(usuario_a_eliminar)

    def prestar_libro(self, isbn, id_usuario):
        libro = self.libros.get(isbn)
        if libro is None:
            raise ValueError("El libro no está disponible en la biblioteca.")
        usuario = next((u for u in self.usuarios if u.id_usuario == id_usuario), None)
        if usuario is None:
            raise ValueError("El usuario no está registrado.")
        usuario.prestar_libro(libro)

    def devolver_libro(self, isbn, id_usuario):
        libro = self.libros.get(isbn)
        if libro is None:
            raise ValueError("El libro no está disponible en la biblioteca.")
        usuario = next((u for u in self.usuarios if u.id_usuario == id_usuario), None)
        if usuario is None:
            raise ValueError("El usuario no está registrado.")
        usuario.devolver_libro(libro)

    def buscar_libro(self, criterio, valor):
        resultados = []
        for libro in self.libros.values():
            if criterio == "titulo" and libro.titulo == valor:
                resultados.append(libro)
            elif criterio == "autor" and libro.autor == valor:
                resultados.append(libro)
            elif criterio == "categoria" and libro.categoria == valor:
                resultados.append(libro)
        return resultados

    def listar_libros_prestados(self, id_usuario):
        usuario = next((u for u in self.usuarios if u.id_usuario == id_usuario), None)
        if usuario is None:
            raise ValueError("El usuario no está registrado.")
        return usuario.libros_prestados


# Ejemplo de uso
biblioteca = Biblioteca()

# Añadir libros
biblioteca.añadir_libro(Libro("El Gran Gatsby", "F. Scott Fitzgerald", "Novela", "1234567890"))
biblioteca.añadir_libro(Libro("1984", "George Orwell", "Ciencia Ficción", "0987654321"))

# Registrar usuarios
biblioteca.registrar_usuario("Juan Pérez", "user1")
biblioteca.registrar_usuario("Ana Martínez", "user2")

# Prestar libros
biblioteca.prestar_libro("1234567890", "user1")

# Buscar libros
print(biblioteca.buscar_libro("titulo", "1984"))

# Listar libros prestados
print(biblioteca.listar_libros_prestados("user1"))

# Devolver libros
biblioteca.devolver_libro("1234567890", "user1")

# Quitar libro
biblioteca.quitar_libro("0987654321")

# Dar de baja un usuario
biblioteca.dar_baja_usuario("user2")
